"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var directives;
var components;
var nextCid = 1;
var validExpressionStartChars = "$@#";
function registerDirective(directive) {
    directives[directive.tagName] = directive;
}
exports.registerDirective = registerDirective;
function getDirective(tagName) {
    return directives[tagName];
}
exports.getDirective = getDirective;
function registerComponent(component) {
    components[component.tagName] = component;
}
exports.registerComponent = registerComponent;
function getComponent(tagName) {
    return components[tagName];
}
exports.getComponent = getComponent;
function registerSuit(suite) {
    for (var _i = 0, _a = suite.directives; _i < _a.length; _i++) {
        var directive = _a[_i];
        registerDirective(directive);
    }
    for (var _b = 0, _c = suite.components; _b < _c.length; _b++) {
        var component = _c[_b];
        registerComponent(component);
    }
}
exports.registerSuit = registerSuit;
function handleGet(url, req, resp) {
    throw "Not implemented yet!";
}
function handlePost(url, req, resp) {
    throw "Not implemented yet!";
}
function resolveDomNode(node, ctx) {
    if (node.nodeType === Node.CDATA_SECTION_NODE) {
        var res = new WNode();
        res.parent = ctx;
        res.type = "cdata";
        res.value = resolveToString(node.textContent, ctx.getModel());
        return [res];
    }
    else if (node.nodeType === Node.COMMENT_NODE) {
        var res = new WNode();
        res.parent = ctx;
        res.type = "comment";
        res.value = resolveToString(node.textContent, ctx);
        return [res];
    }
    else if (node.nodeType === Node.TEXT_NODE) {
        var res = new WNode();
        res.parent = ctx;
        res.type = "text";
        res.value = resolveToString(node.textContent, ctx);
        return [res];
    }
    else if (node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.ELEMENT_NODE) {
        var tagName = node.nodeName;
        var directive = getDirective(tagName);
        if (directive != null) {
            return directive.parse(node, ctx);
        }
        var res = new WNode();
        res.cid = getNextCid();
        res.type = "element";
        res.tagName = tagName;
        res.parent = ctx;
        res.modelNS = resolveModelNS(node, ctx);
        for (var i = 0; i < node.attributes.length; i++) {
            res.attributes.put(node.attributes.item(i).nodeName, resolveString(node.attributes.item(i).nodeValue, ctx));
        }
        for (var i = 0; i < node.childNodes.length; i++) {
            res.children = res.children.concat(resolveDomNode(node.childNodes.item(i), res));
        }
        return [res];
    }
    else {
        throw "Unhandled xml element type: " + node.nodeType;
    }
}
exports.resolveDomNode = resolveDomNode;
function resolveModelNS(node, ctx) {
    if (ctx == null) {
        return null;
    }
    if (ctx.parent == null) {
        return "";
    }
    if (ctx.modelNS == null) {
        return null;
    }
    var modelAttr = node.attributes.getNamedItem("model");
    if (modelAttr == null) {
        return null;
    }
    var modelExp = modelAttr.nodeValue;
    if (modelExp === "${model}") {
        return ctx.modelNS;
    }
    if (modelExp.indexOf("${model.") == 0) {
        modelExp = unpackExpression(modelExp);
        modelExp = modelExp.substring(5);
        return ctx.modelNS + modelExp;
    }
    else if (modelExp.indexOf("${model[") == 0) {
        modelExp = unpackExpression(modelExp);
        modelExp = modelExp.substring(5);
        return ctx.modelNS + modelExp;
    }
    return null;
}
function resolveToString(input, ctx) {
    throw "Not implemented yet!";
}
exports.resolveToString = resolveToString;
function resolveString(input, ctx) {
    if (input == null) {
        return null;
    }
    if (input.length < 3) {
        return input;
    }
    if (validExpressionStartChars.indexOf(input.charAt(0)) > -1 && input.charAt(1) === "{" && input.charAt(input.length - 1) === "}") {
        return resolveExpression(input, ctx);
    }
    return resolveToString(input, ctx);
}
exports.resolveString = resolveString;
function resolveExpression(input, ctx) {
    var exp = unpackExpression(input);
    if (exp == null) {
        throw "Not a valid expression: '" + input + "'";
    }
    var firstChar = input.charAt(0);
    if (firstChar === "$") {
        return resolveReferenceExpression(exp, ctx);
    }
    if (firstChar === "@") {
        return resolveControllerReference(exp, ctx);
    }
    if (firstChar === "#") {
        return resolveCodeExpression(exp, ctx);
    }
    throw "Unhandled expression start char: '" + input.charAt(0) + "'";
}
exports.resolveExpression = resolveExpression;
function resolveReferenceExpression(exp, ctx) {
    exp = resolveToString(exp, ctx);
    return eval(exp);
}
function resolveControllerReference(exp, ctx) {
    exp = resolveToString(exp, ctx);
    return "wpi.callAction('" + exp + "')";
}
function resolveCodeExpression(exp, ctx) {
    exp = resolveToString(exp, ctx);
    return eval(exp);
}
function getNextCid() {
    return "cid-" + nextCid++;
}
exports.getNextCid = getNextCid;
function unpackExpression(exp) {
    if (exp == null) {
        return null;
    }
    if (exp.length < 3) {
        return null;
    }
    var firstChar = exp.charAt(0);
    var secondChar = exp.charAt(1);
    var lastChar = exp.charAt(exp.length - 1);
    if (validExpressionStartChars.indexOf(firstChar) > -1 && secondChar == "{" && lastChar == "}") {
        return exp.slice(2, exp.length - 1);
    }
    return null;
}
function renderNode(node, result) {
    throw "Not implemented yet!";
}
function renderPage(node, result) {
    throw "Not implemented yet!";
}
function renderComposite(node, result) {
    throw "Not implemented yet!";
}
function renderHtml(node, result) {
    throw "Not implemented yet!";
}
var ADirective = (function () {
    function ADirective(_tagName) {
        this._tagName = _tagName;
    }
    Object.defineProperty(ADirective.prototype, "tagName", {
        get: function () {
            return this._tagName;
        },
        enumerable: true,
        configurable: true
    });
    return ADirective;
}());
exports.ADirective = ADirective;
var AComponent = (function () {
    function AComponent(_tagName) {
        this._tagName = _tagName;
    }
    Object.defineProperty(AComponent.prototype, "tagName", {
        get: function () {
            return this._tagName;
        },
        enumerable: true,
        configurable: true
    });
    return AComponent;
}());
exports.AComponent = AComponent;
var WNode = (function () {
    function WNode() {
        this.parent = null;
        this.modelNS = null;
        this.attributes = new Map();
        this.children = [];
    }
    WNode.prototype.getModel = function () {
        return this.attributes["model"];
    };
    WNode.prototype.getAttributeRecursive = function (name) {
        var res = this.attributes[name];
        if (res == null && this.parent != null) {
            return this.parent.getAttributeRecursive(name);
        }
        return null;
    };
    return WNode;
}());
exports.WNode = WNode;
// export class Attribute {
//     public name: string;
//     public value: object;
// }
var Suite = (function () {
    function Suite() {
        this.directives = [];
        this.components = [];
    }
    Suite.prototype.addDirective = function (directive) {
        this.directives.push(directive);
    };
    Suite.prototype.addComponent = function (component) {
        this.components.push(component);
    };
    return Suite;
}());
exports.Suite = Suite;
var RenderResult = (function () {
    function RenderResult() {
        this._head = "";
        this._body = "";
        this._headOnce = new Map();
        this._bodyOnce = new Map();
        this._modelRegister = new Map();
        this._logItems = [];
        this._hasError = false;
    }
    Object.defineProperty(RenderResult.prototype, "modelRegister", {
        get: function () {
            return this._modelRegister;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderResult.prototype, "head", {
        get: function () {
            return this._head;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderResult.prototype, "body", {
        get: function () {
            return this._body;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderResult.prototype, "headOnce", {
        get: function () {
            var res = [];
            for (var _i = 0, _a = this._headOnce.entries; _i < _a.length; _i++) {
                var entry = _a[_i];
                res.push(entry.value);
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderResult.prototype, "bodyOnce", {
        get: function () {
            var res = [];
            for (var _i = 0, _a = this._bodyOnce.entries; _i < _a.length; _i++) {
                var entry = _a[_i];
                res.push(entry.value);
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    RenderResult.prototype.appendHead = function (head) {
        this._head = this._head + head;
    };
    RenderResult.prototype.appendHeadOnce = function (key, head) {
        this._headOnce.put(key, head);
    };
    RenderResult.prototype.appendBody = function (body) {
        this._body = this._body + body;
    };
    RenderResult.prototype.appendBodyOnce = function (key, body) {
        this._bodyOnce.put(key, body);
    };
    RenderResult.prototype.log = function (level, message, node) {
        this._logItems.push(new LogItem(level, message, node));
        if (!this._hasError) {
            if (level == "error") {
                this._hasError = true;
            }
        }
    };
    Object.defineProperty(RenderResult.prototype, "hasError", {
        get: function () {
            return this._hasError;
        },
        enumerable: true,
        configurable: true
    });
    RenderResult.prototype.printLog = function () {
        for (var _i = 0, _a = this._logItems; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.level == "info") {
                console.info(item.message);
            }
            else if (item.level = "warning") {
                console.warn(item.message);
            }
            else {
                console.error(item.message);
            }
        }
    };
    return RenderResult;
}());
exports.RenderResult = RenderResult;
var Map = (function () {
    function Map() {
        this.arr = [];
    }
    Map.prototype.get = function (key) {
        var entry = this.getEntry(key);
        if (entry == null) {
            return null;
        }
        return entry.value;
    };
    Map.prototype.getEntry = function (key) {
        var idx = this.indexOf(key);
        if (idx < 0) {
            return null;
        }
        return this.arr[idx];
    };
    Map.prototype.put = function (key, value) {
        if (value == null) {
            // TODO remove
            return;
        }
        if (key == null) {
            throw "Null keys not allowed!";
        }
        var res = null;
        var idx = this.indexOf(key);
        if (idx > -1) {
            res = this.arr[idx].value;
            this.arr[idx] = new MapEntry(key, value);
        }
        else {
            this.arr.push(new MapEntry(key, value));
        }
        return res;
    };
    Map.prototype.remove = function (key) {
        var res = null;
        var idx = this.indexOf(key);
        if (idx < 0) {
            return null;
        }
        res = this.arr[idx].value;
        this.arr.splice(idx, 1);
        return res;
    };
    Map.prototype.indexOf = function (key) {
        for (var i = 0; i < this.arr.length; i++) {
            var entry = this.arr[i];
            if (entry.key === key) {
                return i;
            }
        }
        return -1;
    };
    Object.defineProperty(Map.prototype, "length", {
        get: function () {
            return this.arr.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Map.prototype, "entries", {
        get: function () {
            return [].concat(this.arr);
        },
        enumerable: true,
        configurable: true
    });
    return Map;
}());
exports.Map = Map;
var MapEntry = (function () {
    function MapEntry(_key, _value) {
        this._key = _key;
        this._value = _value;
    }
    Object.defineProperty(MapEntry.prototype, "key", {
        get: function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapEntry.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    return MapEntry;
}());
exports.MapEntry = MapEntry;
var LogItem = (function () {
    function LogItem(level, message, node) {
        this.level = level;
        this.message = message;
    }
    return LogItem;
}());
//# sourceMappingURL=data:application/json;base64,